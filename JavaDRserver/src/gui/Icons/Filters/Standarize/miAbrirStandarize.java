/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * miAbrirStandarize.java
 *
 * Created on 21-jun-2012, 17:20:47
 */
package gui.Icons.Filters.Standarize;

import algorithm.classification.TableModelImport;
import algorithm.classification.c45_1.TableModelImportT;
import algorithm.cluster.Atributo;
//import com.sun.org.apache.bcel.internal.generic.ConversionInstruction;
//////import gui.Icons.preproceso.StandarizeIcon;
import java.awt.Component;
import java.util.LinkedList;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Juan Carlos
 */
public class miAbrirStandarize extends javax.swing.JFrame {
    
       private StandarizeIcon ci; 
       private AbstractTableModel dataBin;
       private AbstractTableModel dataEst;
       private AbstractTableModel data;
       int rows, cols;
       private Object[] atriColumnas;     
       private Atributo atributo;   
       private double media,varianza,desviacion,z;
       private Object[][] data1; 
       private Object[][] data2; 
       private String[] columnsName; 
       private LinkedList listem;
       
       boolean colNumerical[];
       boolean colStandarize[];

    /** Creates new form miAbrirStandarize */
    public miAbrirStandarize(StandarizeIcon ci) {
        initComponents();
        this.ci = ci;
        rows = ci.dataIn.getRowCount();
        cols = ci.dataIn.getColumnCount();
        data = ci.dataIn;
        cargarColumnas();
//        mostrarDatos(data);
//        ltotal1.setText(""+rows);
    }
    
    public miAbrirStandarize() {
        initComponents();
    }
    
    public void updateIcon(StandarizeIcon icon) {
        this.ci = icon;

        rows = ci.dataIn.getRowCount();
        cols = ci.dataIn.getColumnCount();
        data = ci.dataIn;
        
        if(ci.colNumericalS == null){
           colNumerical = new boolean[jtblNumerical.getRowCount()];
        }
        
        if(ci.colStandarizeS == null){
           colStandarize = new boolean[jtblNumerical.getRowCount()];
        }
       
        cargarColumnas();
//        mostrarDatos(data);
//        ltotal1.setText(""+rows);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jscropane = new javax.swing.JScrollPane();
        jtblNumerical = new javax.swing.JTable();
        lblInfo = new javax.swing.JLabel();
        btnPrepro = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jtblNumerical.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Título 1", "Título 2", "Título 3", "Título 4", "Título 5"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtblNumerical.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblNumericalMouseClicked(evt);
            }
        });
        jscropane.setViewportView(jtblNumerical);

        lblInfo.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblInfo.setText("Numerical values");

        btnPrepro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/play.png"))); // NOI18N
        btnPrepro.setText("Play");
        btnPrepro.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrepro.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrepro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreproActionPerformed(evt);
            }
        });

        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit2.png"))); // NOI18N
        btnAceptar.setText("Close");
        btnAceptar.setEnabled(false);
        btnAceptar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAceptar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jscropane, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPrepro, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                            .addComponent(btnAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lblInfo))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jscropane, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(btnPrepro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(btnAceptar)
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtblNumericalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblNumericalMouseClicked
        
//     creo que aqui toca ver si es entero para hacer todo lo demas
        int fila = Integer.parseInt(jtblNumerical.getValueAt(jtblNumerical.getSelectedRow(),1).toString()); //Tomar de la tabla opcion
        String clase = jtblNumerical.getValueAt(jtblNumerical.getSelectedRow(),2).toString(); //Tomar de la tabla opcion
        boolean opc2 = Boolean.parseBoolean(jtblNumerical.getValueAt(jtblNumerical.getSelectedRow(),3).toString()); //Tomar de la tabla opcion
        boolean opc3 = Boolean.parseBoolean(jtblNumerical.getValueAt(jtblNumerical.getSelectedRow(),4).toString()); //Tomar de la tabla opcion
//        boolean opc4= Boolean.parseBoolean(jtabla.getValueAt(jtabla.getSelectedRow(),4).toString()); //Tomar de la tabla opcion
        
//        int fila = jtabla.getSelectedRow();
        // int col=jtabla.getSelectedColumn();
//        Atributo at = new Atributo();
//        at = (Atributo) atriColumnas[fila];
        Atributo at =  (Atributo)atriColumnas[fila];
        
        at.setClase(clase);
        at.setcomBinario(opc2);
        at.setEstandarizar(opc3);
//        at.setDesabilitar(opc4);
        atriColumnas[fila] = at;
    }//GEN-LAST:event_jtblNumericalMouseClicked

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        this.dispose();
}//GEN-LAST:event_btnAceptarActionPerformed

    private void btnPreproActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreproActionPerformed
        //comBinario(ci.Salida);
        comBinario(ci.dataIn);
        estandarizar(dataBin);  
        
        for(int f = 0; f < jtblNumerical.getRowCount(); f++){
            if(jtblNumerical.getValueAt(f,3).toString().equals("true")) {
                colNumerical[f] = true; // colsel son los atributos seleccionados
            }else{
                colNumerical[f] = false;
            }
            
            if(jtblNumerical.getValueAt(f,4).toString().equals("true")) {
                colStandarize[f] = true; // colsel son los atributos seleccionados
            }else{
                colStandarize[f] = false;
            }
        }
        btnAceptar.setEnabled(true);
        ci.colNumericalS = colNumerical;
        ci.colStandarizeS = colStandarize;
        ci.getMnuRun().setEnabled(true);
}//GEN-LAST:event_btnPreproActionPerformed

    public Object[] getAtriColumnas(){
        return this.atriColumnas;
    }
    
    public AbstractTableModel getData(){
        return this.data;
    }
    
    private void cargarColumnas(){
        DefaultTableModel modeloDa = new DefaultTableModel();
    
        columnsName = new String[cols];
        atriColumnas = new Object[cols];
  
           for(int i = 0; i < cols; i++){    
                columnsName[i] = ci.dataIn.getColumnName(i);
                System.out.println("columna nombre " + columnsName[i]);
                atributo = new Atributo();
                atributo.setAtributo(columnsName[i]);
                atributo.setCol(i);
                atributo.setClase("Undefined"); //por defecto lo pongo Undenined, para que se cambie a integer solo cuando sea numerico
                atriColumnas[i] = atributo;
                modeloDa.addColumn(columnsName[i]); //nombre columana tabla datos     
           } 
     
            ///////////////Establecer caracteristicas de los datos
            Atributo at = new Atributo();

            ///////////////////esto muestra las caracteristicas de cada columna en la tabla
            DefaultTableModel modelo = (new DefaultTableModel(){
             public Class getColumnClass(int columnIndex){  //esto se utiliza para redefinir el metodo de defaultablemodel
                    if(columnIndex < 3){        //getcolumnclass para que tome el campo deseado en la tabla
                            return String.class; // en este caso queremos booleanos tipo checkbox
                    } else if(columnIndex >= 3){
                            return Boolean.class;
                    }
                    return Object.class;
            }
            }); 

            jtblNumerical.setModel(modelo);  

            modelo.addColumn("ATRIBUTE"); 
            modelo.addColumn("COLUMN");
            modelo.addColumn("TYPE");  
            modelo.addColumn("NUMERICAL");  
            modelo.addColumn("STANDARIZE");  
//          modelo.addColumn("DISABLE");  
 
   
            // Object [] fila = new Object[cols];// Se crea un array que sera una de las filas de la tabla.
                                             // Hay  columnas en la tabla
            Object [] fila = new Object[5];// Se crea un array que sera una de las filas de la tabla.
                                             // Hay  columnas en la tabla 
            for(int i = 0; i < cols; i++){

                 if(ci.dataIn.getColumnClass(i).getSimpleName().equalsIgnoreCase("Integer") || ci.dataIn.getColumnClass(i).getSimpleName().equalsIgnoreCase("Double")){

                      at = (Atributo)atriColumnas[i];

                      columnsName[i] = ci.dataIn.getColumnName(i);
                      fila[0] = at.getAtributo();
                      fila[1] = i;
                      fila[2] = ci.dataIn.getColumnClass(i).getSimpleName(); //at.getTipo();
                      
                      if(ci.colNumericalS == null){
                         fila[3] = at.getcomBinario();
                      }else{
                         fila[3] = ci.colNumericalS[i];
                      }
                      
                      
                      if(ci.colStandarizeS == null){
                         fila[4] = at.getEstandarizar();
                      }else{
                         fila[4] = ci.colStandarizeS[i];
                      }
                      modelo.addRow(fila);
                 }
             }  
   }
  
    
    private void comBinario(AbstractTableModel datos ){
          /*  System.out.println("Proceso para convertir datos a binario ......................");
        data1 = new Object[rows][cols]; 
           data2 = new Object[rows][cols]; 
           
           int colBin= 2;
           String[] d1=new String[2];
           d1[0]="";
           d1[1]="";
           
           int d2;
           String actual="";
        
           for(int i = 0; i < cols; i++){
                   d1[0]="";
                   d1[1]="";
                for(int j = 0; j < rows; j++){
                   actual= datos.getValueAt(j,i).toString(); 
                   if (((Atributo) atriColumnas[i]).getcomBinario()){ //si vamos a combertir la columana
                     
                       if (buscarval(d1,actual)){ //este bloque combierte a binario la columna
                      data1[j][i]=buscarpos(d1,actual);
                      }
                      else{
                         d2=buscarpos(d1,"");
                         data1[j][i]=d2;
                         d1[d2]=actual;
                       }
                   }else
                   {
                     data1[j][i] =datos.getValueAt(j,i); //de lo contraio los dejamos iguales 
                   }
                             
                                
                                                 
                }
                
           } 
           
       dataBin=new TableModelImport(data1,columnsName);
        */   

           data1 = new Object[rows][cols]; 
           data2 = new Object[rows][cols]; 
           
           int colEst= 1;
           String[] d1=new String[2];
                     
           int d2;
           String actual="";
           double valor=0.0;
           double por=0.0;
           LinkedList listempo =new LinkedList();
          
          for(int i = 0; i < cols; i++){
                  if (((Atributo) atriColumnas[i]).getcomBinario()){  
                       
                  listempo=listaDiferentes(i,datos);
                     for(int m=0;m<listempo.size();m++){
                       por = porcenDiferentes(i, datos, listempo.get(m).toString());
                          for(int j = 0; j < rows; j++){
                           if (listempo.get(m).equals(datos.getValueAt(j,i).toString())){
                           data1[j][i] =por; 
                                  
                           }else{
                               //  data1[j][i] =datos.getValueAt(j,i); 
                            }
                               
                            }
                          }
                  
                        }else{
                            for(int j = 0; j < rows; j++)
                            data1[j][i] = datos.getValueAt(j,i); //de lo contraio los dejamos iguales 

                      }
                     }   
               
           
        dataBin = new TableModelImport(data1,columnsName);
        data = dataBin;
               
//        mostrarDatos(dataBin);
    }
    
    private double porcenDiferentes(int columna,AbstractTableModel datos,String da){
        double contador=0;
        double pro=0.0;
        for(int i=0;i<rows;i++)
        {
           if(datos.getValueAt(i,columna).toString().equals(da))
               contador++;
        }
                       
         pro =  contador / (double)rows;
               
           
        return pro;
    }
    
    private LinkedList listaDiferentes(int columna,AbstractTableModel datos){
        int contador=0;
        LinkedList listem=new LinkedList();
        String dato=""; 
        for(int i=0;i<rows;i++)
        {
          dato=datos.getValueAt(i,columna).toString();
          if (busenLista(listem,dato)==false)
          listem.addLast(dato);
              
        }
              
        return listem;
    }
    
    private boolean busenLista(LinkedList lista,String da){
        for(int i=0;i<lista.size();i++){
            if (lista.get(i).equals(da))
                return true;
                     
        }
        return false;
    }
  
    
    
    private void estandarizar(AbstractTableModel datos){
           System.out.println("Proceso para convertir datos estandar ......................");
           data1 = new Object[rows][cols]; 
           data2 = new Object[rows][cols]; 
           
           int colEst= 1;
           String[] d1=new String[2];
                     
           int d2;
           String actual="";
           double valor = 0.0;
           for(int i = 0; i < cols; i++){
                   if (((Atributo) atriColumnas[i]).getEstandarizar()){  
                        
                        media = calmedia(i,datos);
                        desviacion=desviacionEst(i,media,datos);
                  
                        System.out.println("media "+ media);
                        System.out.println("desvicion "+ desviacion);
                      
                        for(int j = 0; j < rows; j++){
                              valor = Double.parseDouble(datos.getValueAt(j,i).toString());
                              data1[j][i] = (valor-media)/desviacion;
                        }
                      }else{
                            for(int j = 0; j < rows; j++)
                            data1[j][i] = datos.getValueAt(j,i); //de lo contraio los dejamos iguales 
                      }
             }                    
        dataEst=new TableModelImport(data1,columnsName);
        data=dataEst;
//        mostrarDatos(dataEst);
    } 
    
    
    private double calmedia(int columna,AbstractTableModel datos){
        double suma=0.0;
        double media,valor;
        
        for(int i=0;i<rows;i++){
            valor=Double.parseDouble(datos.getValueAt(i,columna).toString());
            suma=suma + valor;
        }
        media=suma/rows;
        return media;
    }
    private double desviacionEst(int columna,double media,AbstractTableModel datos){
        double varianza=0.0;
        double valor,desviacion;
        
        for(int i=0;i<rows;i++){
            valor=Double.parseDouble(datos.getValueAt(i,columna).toString());
            varianza=varianza + Math.pow(valor-media,2);
        }
        varianza=varianza/rows;
        desviacion=Math.sqrt(varianza);
        return desviacion; 
    }
    
// private void mostrarDatos(AbstractTableModel datos){
//     Object [] fila = new Object[cols];  
//     DefaultTableModel modeloDa = new DefaultTableModel();
//
//    for(int i = 0; i < cols; i++)
//        modeloDa.addColumn(columnsName[i]);
//        
//               for(int i = 0; i < rows; i++){
//              
//                for(int j = 0; j < cols; j++){
//                    fila[j] = datos.getValueAt(i,j); //de lo contraio los dejamos iguales 
//                                                 
//                }
//             modeloDa.addRow(fila);   
//           }         
// } 
 
 private boolean buscarval(String[] dtb,String bus){
       for(int i=0;i<dtb.length;i++){
           if (dtb[i].equals(bus))
              return true;
       }
       return false;
    }
    private int buscarpos(String[] dtb,String bus){
       for(int i=0;i<dtb.length;i++){
           if (dtb[i].equals(bus))
              return i;
       }
       return 0;
    }
    
    public boolean[] getColNumerical(){
        return colNumerical;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
             miAbrirStandarize cp = new miAbrirStandarize(new StandarizeIcon(new JLabel(), 0 , 0, 0));
                cp.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnPrepro;
    private javax.swing.JScrollPane jscropane;
    private javax.swing.JTable jtblNumerical;
    private javax.swing.JLabel lblInfo;
    // End of variables declaration//GEN-END:variables
}
