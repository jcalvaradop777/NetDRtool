/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * mipnlPreprocesamiento.java
 *
 * Created on 24-ene-2015, 14:44:23
 */
package gui.KnowledgeFlow;

import java.awt.Component;
import java.awt.datatransfer.StringSelection;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Juan Carlos
 */

public class mipnlPreprocesamiento extends javax.swing.JPanel implements DragSourceListener, DragGestureListener{

    
private DragSource dragSource;
private miContenedor container;

    /** Creates new form mipnlPreprocesamiento */
    public mipnlPreprocesamiento(miContenedor container) {
        this.container = container;
        initComponents();
        // Step 1: Create a DragSource instance
        dragSource = new DragSource();
        // Step 2 and 3: Ask the DragSource to watch this JList
        //(first this) and to
        // notify this class when a drag gesture is recognized (second this)
        dragSource.createDefaultDragGestureRecognizer( this,DnDConstants.ACTION_COPY, this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Save = new javax.swing.JFileChooser();
        Open = new javax.swing.JFileChooser();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnGuardarMapa = new javax.swing.JButton();
        btnAbrirMapa = new javax.swing.JButton();
        btnLimpiarMapa = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        Save.setDialogTitle("Save Map KDD");
        Save.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        Open.setCurrentDirectory(null);
        Open.setDialogTitle("Open Map KDD");

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Conexion/baseDatos.png"))); // NOI18N
        jLabel11.setText(" Connection DB ");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel11.setName("Conexion BD"); // NOI18N
        jLabel11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Conexion/archivoPlano.png"))); // NOI18N
        jLabel12.setText(" Plain Text ");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel12.setName("plaintext"); // NOI18N
        jLabel12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        btnGuardarMapa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/filesave.png"))); // NOI18N
        btnGuardarMapa.setText("Save Project");
        btnGuardarMapa.setToolTipText("Save Project VisMineKDD");
        btnGuardarMapa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardarMapa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuardarMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarMapaActionPerformed(evt);
            }
        });

        btnAbrirMapa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open.png"))); // NOI18N
        btnAbrirMapa.setText("Open Project");
        btnAbrirMapa.setToolTipText("Open Project VisMineKDD");
        btnAbrirMapa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbrirMapa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAbrirMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirMapaActionPerformed(evt);
            }
        });

        btnLimpiarMapa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.png"))); // NOI18N
        btnLimpiarMapa.setText("New Poject");
        btnLimpiarMapa.setToolTipText("Clean Screen");
        btnLimpiarMapa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLimpiarMapa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLimpiarMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarMapaActionPerformed(evt);
            }
        });

        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Conexion/harddisk1.png"))); // NOI18N
        jLabel13.setText("Example");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel13.setName("Example"); // NOI18N
        jLabel13.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(btnGuardarMapa, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAbrirMapa, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiarMapa, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGuardarMapa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAbrirMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLimpiarMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel13.getAccessibleContext().setAccessibleName("Example");
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarMapaActionPerformed
        // para guardarlo como archivo serializado____________________________

        String path = "ar.vm";
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Files VisMineKdd (.vm)","vm");
        Save.setFileFilter(filter);
        int saveOK = Save.showSaveDialog(this);
        if (saveOK == Save.APPROVE_OPTION) {
            path = Save.getSelectedFile().getAbsolutePath();
            path += ".vm";
        }

        try {
            FileOutputStream fsIcon = new FileOutputStream(path);
            ObjectOutputStream osIcon = new ObjectOutputStream(fsIcon);
            
            osIcon.writeBytes(System.getProperty("java.specification.version"));
            osIcon.writeObject(container.canvas.getGrafo());
             
            ChooserEscritorio.setStatus("Saved File: " + path);
            System.out.println("Icon Guardado");
            osIcon.close();
            
            JOptionPane.showMessageDialog(this, "Successfully saved project whit java version: " +  System.getProperty("java.specification.version"), "VisMineKDD", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            ChooserEscritorio.setStatus("Failed to save the project");
            JOptionPane.showMessageDialog(this, "Failed to save the project", "VisMineKDD", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGuardarMapaActionPerformed

    private void btnAbrirMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirMapaActionPerformed
//        para abrir un archivo serializado_____________________________________
        container.canvas.conexiones.clear();
        container.canvas.removeAll();
        container.canvas.contIcons = 1;
        container.canvas.repaint();

        String path = "ar.vm";
        String versionJArchivo = "";
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Files VisMineKdd (.vm)","vm");
        Open.setFileFilter(filter);
        int openOK = Open.showOpenDialog(this);
        if (openOK == Open.APPROVE_OPTION) {
            path = Open.getSelectedFile().getAbsolutePath();
        }

        try {
            FileInputStream fisIcon = new FileInputStream(path);
            ObjectInputStream oisIcon = new ObjectInputStream(fisIcon);
            
            versionJArchivo = oisIcon.readLine();
            container.canvas.setGrafo((Object[]) oisIcon.readObject());
            oisIcon.close();
            
            ChooserEscritorio.setStatus("Open File: " + path);
            System.out.println("Icon Abierto");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to open the project, Java version is not compatible\nJava version of file :" + versionJArchivo + "\nCurrent version of java: " + System.getProperty("java.specification.version") , "VisMineKDD" + "", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAbrirMapaActionPerformed

    private void btnLimpiarMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarMapaActionPerformed
        container.canvas.conexiones.clear();
        container.canvas.removeAll();
        container.canvas.contIcons = 1;
        container.canvas.repaint();
        ChooserEscritorio.setStatus("Work area cleaned");
    }//GEN-LAST:event_btnLimpiarMapaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser Open;
    private javax.swing.JFileChooser Save;
    private javax.swing.JButton btnAbrirMapa;
    private javax.swing.JButton btnGuardarMapa;
    private javax.swing.JButton btnLimpiarMapa;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    // End of variables declaration//GEN-END:variables

    public void dragEnter(DragSourceDragEvent dsde) {
         System.out.println( "DS: dragEnter" );
    }

    public void dragOver(DragSourceDragEvent dsde) {
         System.out.println( "DS: dragOver" );
    }

    public void dropActionChanged(DragSourceDragEvent dsde) {
        System.out.println( "DS: dropActionChanged" );
    }

    public void dragExit(DragSourceEvent dse) {
         System.out.println( "DS: dragExit" );
    }

    public void dragDropEnd(DragSourceDropEvent dsde) {
        System.out.println( "DS: dragDropEnd" );
        if( dsde.getDropSuccess() ) {
            System.out.println( "Object successfully dropped" );
        } else {
            System.out.println( "Object not successfully dropped" );
        }
    }

    public void dragGestureRecognized(DragGestureEvent dge) {
        Component press = findComponentAt(dge.getDragOrigin());
        
        //Object selected = getSelectedValue();
        if( press instanceof  JLabel ) {
            JLabel icon = (JLabel)press;
            // Step 4: StringSelection implements Transferable
            // Build a StringSelection object that the Drag Source
            // can use to transport a string to the Drop Target
            StringSelection text = new StringSelection(icon.getText());
            JLabel pressed = new JLabel(icon.getText(), icon.getIcon(), JLabel.CENTER);
            pressed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            pressed.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            pressed.setName(icon.getName());
            pressed.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            
            //Transferable dataIcon = new ImageSelection(icon);
            container.setDragged(pressed);
            // Step 5: As the DragSource to start the drag of our text
            dragSource.startDrag( dge, DragSource.DefaultMoveDrop,
                    text, this );
        } else {
            System.out.println( "nothing was selected");
        }
    }
    
    public String getToolTipText(MouseEvent event){
        Component press = findComponentAt(event.getPoint());
        if(press instanceof JLabel){
            JLabel iconPress = (JLabel)press;
            String name = iconPress.getText();
            String tooltip = "<strong>" + name + "</strong><br>";
            if(name.trim().equals("Example")){
                tooltip += "A connection to data example.";
            }else if(name.trim().equals("Connection DB")){
                tooltip += "A connection to data bases.";
            } else if(name.trim().equals("Plain Text")){
                tooltip += "A connection to files in disk.";
            }
            return this.setIconInfo(tooltip);
        } else {
            return null;
        }
    }
    
    private String setIconInfo(String str){
        str = str.replaceAll("\n", "<p>");
        str = "<html>".concat(str).concat("</html>");
        return str;
    }
}
