/*
 * pnlPreprocesamiento.java
 *
 */

package gui.KnowledgeFlow;

import java.awt.Component;
import java.awt.datatransfer.StringSelection;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.event.MouseEvent;
import javax.swing.JLabel;

/**
 *
 * @author  Juan Carlos Alvarado
 */
public class pnlAlgoritmos extends javax.swing.JPanel implements DragSourceListener, DragGestureListener {
    private DragSource dragSource;
    private Contenedor container;
    
    /** Creates new form pnlPreprocesamiento */
    public pnlAlgoritmos(Contenedor container) {
        this.container = container;
        initComponents();
        jSeparator1.setName("otro");
        this.setName("otro");
        // Step 1: Create a DragSource instance
        dragSource = new DragSource();
        // Step 2 and 3: Ask the DragSource to watch this JList
        //(first this) and to
        // notify this class when a drag gesture is recognized (second this)
        dragSource.createDefaultDragGestureRecognizer( this,DnDConstants.ACTION_COPY, this);
        
    }
    
    public String getToolTipText(MouseEvent event){
        Component press = findComponentAt(event.getPoint());
        if(press instanceof JLabel){
            JLabel iconPress = (JLabel)press;
            if(iconPress.getName().equals("otro")){
                return null;
            }
            String name = iconPress.getText();
            String tooltip = "<strong>" + name + "</strong><br>";
            if(name.trim().equals("Apriori")){
                tooltip += "The Apriori association algorithm.";
            } else if(name.trim().equals("FPGrowth")){
                tooltip += "The FPGrowth association algorithm.";
            } else if(name.trim().equals("EquipAsso")){
                tooltip += "The EquipAsso association algorithm.";
            } else if(name.trim().equals("C45")){
                tooltip += "The C4.5 classification algorithm.";
            } else if(name.trim().equals("Mate")){
                tooltip += "The Mate classification algorithm.";
            }
            return this.setIconInfo(tooltip);
        } else {
            return null;
        }
    }
    
    private String setIconInfo(String str){
        str = str.replaceAll("\n", "<p>");
        str = "<html>".concat(str).concat("</html>");
        return str;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setToolTipText("por ver");
        setName("otro"); // NOI18N

        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Algoritmos/EquipAsso.png"))); // NOI18N
        jLabel10.setText("EquipAsso");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel10.setName("EquipAsso"); // NOI18N
        jLabel10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Algoritmos/FPGrowt.png"))); // NOI18N
        jLabel11.setText("FPGrowth");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel11.setName("FPGrowth"); // NOI18N
        jLabel11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Algoritmos/Apriori.png"))); // NOI18N
        jLabel12.setText("Apriori");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel12.setName("Apriori"); // NOI18N
        jLabel12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setName("otro"); // NOI18N

        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Algoritmos/C45.png"))); // NOI18N
        jLabel13.setText("  C45  ");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel13.setName("c45"); // NOI18N
        jLabel13.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Algoritmos/Mate.png"))); // NOI18N
        jLabel14.setText("  Mate  ");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel14.setName("mate"); // NOI18N
        jLabel14.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jLabel1.setFont(new java.awt.Font("Dialog", 2, 16));
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CLASIFICATION");
        jLabel1.setName("otro"); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 2, 16));
        jLabel2.setForeground(new java.awt.Color(0, 51, 153));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ASSOCIATION");
        jLabel2.setName("otro"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(50, 50, 50)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(524, 524, 524))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel12)
                            .add(jLabel11)
                            .add(jLabel10)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(13, 13, 13))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(jLabel14))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Step 6: Listen to all notifications when our object is dragged
    // over a drop target
    public void dragEnter(DragSourceDragEvent dsde) {
        System.out.println( "DS: dragEnter" );
    }
    public void dragOver(DragSourceDragEvent dsde) {
        System.out.println( "DS: dragOver" );
    }
    public void dropActionChanged(DragSourceDragEvent dsde) {
        System.out.println( "DS: dropActionChanged" );
    }
    public void dragExit(DragSourceEvent dse) {
        System.out.println( "DS: dragExit" );
    }
    
    // Step 7: Handle the drop
    public void dragDropEnd(DragSourceDropEvent dsde) {
        System.out.println( "DS: dragDropEnd" );
        if( dsde.getDropSuccess() ) {
            System.out.println( "Object successfully dropped" );
        } else {
            System.out.println( "Object not successfully dropped" );
        }
    }
    
    public void dragGestureRecognized(DragGestureEvent dge) {
        Component press = findComponentAt(dge.getDragOrigin());
        
        //Object selected = getSelectedValue();
        if( press instanceof  JLabel ) {
            JLabel icon = (JLabel)press;
            // Step 4: StringSelection implements Transferable
            // Build a StringSelection object that the Drag Source
            // can use to transport a string to the Drop Target
            StringSelection text = new StringSelection(
            icon.getText());
            JLabel pressed = new JLabel(icon.getText(), icon.getIcon(), JLabel.CENTER);
            pressed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            pressed.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            pressed.setName(icon.getName());
            pressed.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            
            //Transferable dataIcon = new ImageSelection(icon);
            container.setDragged(pressed);
            // Step 5: As the DragSource to start the drag of our text
            dragSource.startDrag( dge, DragSource.DefaultMoveDrop,
                    text, this );
        } else {
            System.out.println( "nothing was selected");
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
    
}
